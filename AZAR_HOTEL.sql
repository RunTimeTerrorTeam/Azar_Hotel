USE MASTER
GO

CREATE DATABASE AZAR_HOTEL
GO

USE AZAR_HOTEL
GO

CREATE TABLE DEPARTMENTS (
	ID		        INT IDENTITY PRIMARY KEY,
	Name	        NVARCHAR(50) UNIQUE,
	Manager_ID		INT
)
CREATE TABLE EMPLOYEES (
	ID				INT IDENTITY PRIMARY KEY,
	National_ID		NVARCHAR(30) UNIQUE,	
	Name			NVARCHAR(MAX),
	Email			NVARCHAR(50) UNIQUE,
	PhoneNumber		NVARCHAR(50) UNIQUE,
	Gender			BIT,
	Birthdate		DATE,
	Address			NVARCHAR(MAX),
	Salary			MONEY CHECK(Salary >= 0),
	Job				NVARCHAR(MAX),
	DEPARTMENT_ID	INT,
	Available		BIT DEFAULT 1,
	CONSTRAINT FK_EMPLOYEE_DEPARTMENT FOREIGN KEY(DEPARTMENT_ID)
	REFERENCES DEPARTMENTS(ID)
)
ALTER TABLE DEPARTMENTS
ADD CONSTRAINT FK_DEP_EMP FOREIGN KEY(Manager_ID)
REFERENCES EMPLOYEES(ID)
CREATE TABLE CHECK_IN_OUT_EMPLOYEES (
	ID				INT IDENTITY PRIMARY KEY,
	Check_In		DATETIME DEFAULT GETDATE(),
	Check_Out		DATETIME,
	Employee_ID		INT,
	CONSTRAINT FK_CH_IN_OUT_EMPLOYEES FOREIGN KEY(Employee_ID)
	REFERENCES EMPLOYEES(ID)
)
CREATE TABLE DB_INFO (
	ID				INT IDENTITY PRIMARY KEY,
	UserName		NVARCHAR(30) UNIQUE,
	Password		NVARCHAR(MAX),
	Acsses_Number	INT,
	Available		BIT DEFAULT 1,
	Employee_ID		INT,
	CONSTRAINT FK_DBINFO_EMP FOREIGN KEY(Employee_ID)
	REFERENCES EMPLOYEES(ID)
)
CREATE TABLE LOGIN (
	ID				INT IDENTITY PRIMARY KEY,
	TIME			DATETIME DEFAULT GETDATE(),
	DB_ID			INT NOT NULL,
	CONSTRAINT FK_LOGIN_BDINFO FOREIGN KEY(DB_ID)
	REFERENCES DB_INFO(ID)
)
CREATE TABLE GUESTS (
	ID				INT IDENTITY PRIMARY KEY,
	Name			NVARCHAR(MAX),
	Email			NVARCHAR(30) UNIQUE,
	PhoneNumber		NVARCHAR(20) UNIQUE,
	Gender			BIT,
	Birthdate		DATE,
	Address			NVARCHAR(MAX),
	National_ID		NVARCHAR(30) UNIQUE,
	Total			MONEY DEFAULT 0,
	Available		BIT DEFAULT 1
)
CREATE TABLE ROOMS (
	ID				INT IDENTITY PRIMARY KEY,
	Room_Number		NVARCHAR(MAX),
	Section			NVARCHAR(MAX),
	Floor			INT,
	Type			NVARCHAR(MAX),					
	Price			MONEY,
	Available		BIT DEFAULT 1
)
CREATE TABLE RESERVED_ROOMS (
	ID				INT IDENTITY PRIMARY KEY,
	Contract		DATE,
	Expiry			DATE,
	Guest_ID		INT,
	Room_ID			INT,
	Employee_ID		INT,
	CONSTRAINT FK_RESERVED_ROOMS FOREIGN KEY(Room_ID)
	REFERENCES ROOMS(ID),
	CONSTRAINT FK_RESERVED_GUESTS FOREIGN KEY(Guest_ID)
	REFERENCES GUESTS(ID),
	CONSTRAINT FK_RESERVED_EMP FOREIGN KEY(Employee_ID)
	REFERENCES EMPLOYEES(ID)
)
CREATE TABLE PRODUCTS (
	ID				INT IDENTITY PRIMARY KEY,
	Name			NVARCHAR(50) UNIQUE,
	Quantity		INT DEFAULT 0 CHECK(Quantity >= 0),
	Price			MONEY DEFAULT 0 CHECK(Price >= 0),
	Available		BIT DEFAULT 1
)
CREATE TABLE ORDERS (
	ID				INT IDENTITY PRIMARY KEY,
	Time			DATETIME DEFAULT GETDATE(),
	Quantity		INT,
	Guest_ID		INT,
	Product_ID		INT,
	Employee_ID		INT,
	CONSTRAINT FK_ORDERS_GUEST FOREIGN KEY(Guest_ID)
	REFERENCES GUESTS(ID),
	CONSTRAINT FK_ORDERS_PRODUCT FOREIGN KEY(Product_ID)
	REFERENCES PRODUCTS(ID),
	CONSTRAINT FK_ORDERS_EMP FOREIGN KEY(Employee_ID)
	REFERENCES EMPLOYEES(ID),
)
---------------------------------------------------------
CREATE VIEW VIEW_EMPLOYEE AS
SELECT 
	E.ID, E.National_ID, E.Name, E.Job, D.Name AS Department, E.Salary, E.Email, 
	E.PhoneNumber, E.Address, E.Birthdate, iif(E.Gender = 0, 'Male', 'Female') AS Gender, E.Available	
FROM EMPLOYEES AS E LEFT JOIN DEPARTMENTS AS D ON D.ID = E.DEPARTMENT_ID
GO
CREATE VIEW VIEW_DEPARTMENT AS
SELECT D.ID, D.Name, E.Name AS Manager
FROM DEPARTMENTS AS D LEFT JOIN EMPLOYEES AS E ON D.Manager_ID = E.ID
GO
CREATE VIEW VIEW_LOGIN AS
SELECT L.ID, E.Name, L.TIME
FROM LOGIN AS L LEFT JOIN DB_INFO AS D ON L.DB_ID = D.ID LEFT JOIN EMPLOYEES AS E ON E.ID = D.Employee_ID
GO
CREATE VIEW VIEW_ROOM AS
SELECT R.ID, R.Room_Number AS [No], R.Type, R.Section, R.Floor, R.Price, IIF(EXists (
	SELECT ID FROM RESERVED_ROOMS AS RR WHERE (GETDATE() BETWEEN RR.Contract AND RR.Expiry) AND RR.ROOM_ID = R.ID), 0, 1) AS Reserved, R.Available
FROM ROOMS AS R
GO
CREATE VIEW [dbo].[VIEW_RESERVED_ROOM] AS
SELECT RR.ID, R.ID AS Room_ID, Guest_ID ,G.Name AS Client, Employee_ID, E.Name AS Employee, Price * DATEDIFF(day, Contract, Expiry) AS Total,RR.Contract, RR.Expiry
FROM RESERVED_ROOMS AS RR LEFT JOIN ROOMS AS R ON RR.Room_ID = R.ID LEFT JOIN EMPLOYEES AS E ON E.ID = RR.Employee_ID
LEFT JOIN GUESTS AS G ON G.ID = RR.Guest_ID
GO
CREATE VIEW VIEW_PRODUCT AS
SELECT P.ID, P.Name, P.Quantity, P.Price, P.Available			
FROM PRODUCTS AS P
GO
CREATE VIEW VIEW_ORDER AS 
SELECT O.ID, P.Name AS Product, O.Quantity, (O.Quantity * P.Price) AS Price, Guest_ID, G.Name AS Client, Employee_ID ,E.Name AS Employee, O.Time 
FROM ORDERS AS O LEFT JOIN PRODUCTS AS P ON P.ID = O.Product_ID LEFT JOIN EMPLOYEES AS E ON E.ID = O.Employee_ID
LEFT JOIN GUESTS AS G ON G.ID = O.Guest_ID
GO
CREATE VIEW VIEW_CLIENT AS
SELECT 
	G.ID, G.National_ID AS [National ID], G.Name, IIF(G.Gender = 0, 'Male', 'Female') AS Gender, 
	G.Email,  G.PhoneNumber , G.Address, G.Birthdate, G.Total, G.Available
FROM GUESTS AS G
GO
----------------------------------------------------------------------------------------
CREATE TRIGGER ORDERS_TR ON ORDERS instead of INSERT 
AS
DECLARE @PRODUCT INT = (SELECT Product_ID FROM inserted)
DECLARE @QUANTITY INT = (SELECT Quantity FROM inserted) 
BEGIN TRAN
	IF @QUANTITY > (SELECT Quantity FROM PRODUCTS WHERE ID = @PRODUCT)
	BEGIN
		PRINT '~Error : Quantity is unavailable.~' 
		ROLLBACK TRAN
	END
	ELSE
	BEGIN
		UPDATE PRODUCTS SET Quantity = Quantity - @QUANTITY
		WHERE ID = @PRODUCT
		IF @@ERROR <> 0 
		BEGIN
			PRINT '~Error in product table.~'
			ROLLBACK TRAN
		END
		ELSE 
		BEGIN 
			UPDATE GUESTS SET Total = Total + @QUANTITY * (SELECT PRICE FROM PRODUCTS WHERE ID = @PRODUCT)
			WHERE ID = (SELECT Guest_ID FROM inserted)
			IF @@ERROR <> 0
			BEGIN
				PRINT '~Error : Cost of order not added.~'
				ROLLBACK TRAN	
			END
			ELSE 
			BEGIN
				INSERT INTO ORDERS(Product_ID, Employee_ID, Guest_ID, Quantity)
				SELECT Product_ID, Employee_ID, Guest_ID, Quantity FROM inserted
				IF @@ERROR <> 0
				BEGIN 
					PRINT '~Add order rise error.~'
					ROLLBACK TRAN
				END
				ELSE PRINT '~Added succeded.~'
			END
		END
	END
COMMIT TRAN
GO
CREATE TRIGGER ORDERS_TRD ON ORDERS instead of DELETE 
AS
DECLARE @PRODUCT INT = (SELECT Product_ID FROM deleted)
DECLARE @QUANTITY INT = (SELECT Quantity FROM deleted) 
BEGIN TRAN
	UPDATE PRODUCTS SET Quantity = Quantity + @QUANTITY
	WHERE ID = @PRODUCT
	IF @@ERROR <> 0 
	BEGIN
		PRINT '~Error in product table.~'
		ROLLBACK TRAN
	END
	ELSE 
	BEGIN 
		UPDATE GUESTS SET Total = Total - @QUANTITY * (SELECT PRICE FROM PRODUCTS WHERE ID = @PRODUCT)
		WHERE ID = (SELECT Guest_ID FROM deleted)
		IF @@ERROR <> 0
		BEGIN
			PRINT '~Error : Cost of order not Deleted.~'
			ROLLBACK TRAN	
		END
		ELSE 
		BEGIN
			DELETE ORDERS WHERE ID = (SELECT ID FROM deleted)
			IF @@ERROR <> 0
			BEGIN 
				PRINT '~DELETE order rise error.~'
				ROLLBACK TRAN
			END
			ELSE PRINT '~Delete succeded.~'
		END
	END
COMMIT TRAN
GO
CREATE TRIGGER RESERVE_ROOM_TR ON RESERVED_ROOMS INSTEAD OF INSERT AS
BEGIN TRAN
	DECLARE @CONTRACT DATETIME = (SELECT CONTRACT FROM inserted) 
	DECLARE @EXPIR DATETIME = (SELECT Expiry FROM inserted) 
	DECLARE @ID INT = (SELECT ROOM_ID FROM inserted)
	IF EXISTS(SELECT ID FROM RESERVED_ROOMS 
			  WHERE Room_ID = @ID AND (@CONTRACT BETWEEN Contract AND Expiry 
			  OR @EXPIR BETWEEN Contract AND Expiry
			  OR Contract BETWEEN @CONTRACT AND @EXPIR
			  OR Expiry BETWEEN @CONTRACT AND @EXPIR))
	BEGIN
		print '~Room is reserved in this time.~'
		ROLLBACK TRAN
	END
	ELSE 
	BEGIN
		INSERT INTO RESERVED_ROOMS(Contract, Expiry, Guest_ID, Room_ID, Employee_ID)
		SELECT CONTRACT, EXPIRY, GUEST_ID, ROOM_ID, Employee_ID FROM inserted
		IF @@ERROR <> 0
		BEGIN	
			PRINT '~Erorr in reserved room~'
			rollback tran
		END
		Else
		BEGIN
			UPDATE GUESTS SET Total = Total + 
			(SELECT PRICE FROM ROOMS WHERE ROOMS.ID = 
				(SELECT ROOM_ID FROM inserted)) * DATEDIFF(DAY, @CONTRACT, @EXPIR)
			WHERE GUESTS.ID = (SELECT Guest_ID FROM inserted)
			IF @@ERROR <> 0 
			BEGIN
				print '~Error in update total price~'
				rollback tran
			END 
			else print '~Reserved Successfully~' 
		END	
	END
COMMIT TRAN
GO
CREATE TRIGGER RESERVE_ROOM_TRD ON RESERVED_ROOMS INSTEAD OF DELETE AS
DECLARE @ERROR NVARCHAR(MAX)
BEGIN TRAN
	DECLARE @CONTRACT DATETIME = (SELECT CONTRACT FROM deleted) 
	DECLARE @EXPIR DATETIME = (SELECT Expiry FROM deleted) 
	DECLARE @ID INT = (SELECT ROOM_ID FROM deleted)
	DELETE RESERVED_ROOMS WHERE ID = (Select ID FROM DELETED)
	IF @@ERROR <> 0
	BEGIN	
		PRINT '~Erorr in Delete reserved room~'
		rollback tran
	END
	Else
	BEGIN
		IF GETDATE() < @EXPIR
		BEGIN
			UPDATE GUESTS SET Total = Total - 
			(SELECT PRICE FROM ROOMS WHERE ROOMS.ID = @ID) * (DATEDIFF(DAY, GETDATE(), @EXPIR) - 1)
			WHERE GUESTS.ID = (SELECT Guest_ID FROM deleted)
			IF @@ERROR <> 0 
			BEGIN
				print '~Error in update total price~'
				rollback tran
			END 
			else print '~Delete Reserved Successfully~' 
		END
	END	
COMMIT TRAN
GO
-------------------------------------------------------------------------------------
CREATE PROC ADD_EMPLOYEE 
	@NATIONAL_ID	INT,
	@NAME			NVARCHAR(MAX),
	@EMAIL			NVARCHAR(50),
	@JOB			NVARCHAR(MAX),
	@SALARY			MONEY,
	@DEP_ID			INT,
	@PH_NO			NVARCHAR(50),
	@ADDRESS		NVARCHAR(MAX),
	@BIRTHDATE		DATE,
	@GENDER			BIT
AS
INSERT INTO EMPLOYEES(National_ID, Name, Email, Job, Salary, DEPARTMENT_ID, PhoneNumber, Address, Birthdate, Gender)
VALUES (@NATIONAL_ID, @NAME, @EMAIL, @JOB, @SALARY, @DEP_ID, @PH_NO, @ADDRESS, @BIRTHDATE, @GENDER)
GO
CREATE PROC ADD_CLIENT 
	@NATIONAL_ID	INT,
	@NAME			NVARCHAR(MAX),
	@EMAIL			NVARCHAR(50),
	@PH_NO			NVARCHAR(50),
	@ADDRESS		NVARCHAR(MAX),
	@BIRTHDATE		DATE,
	@GENDER			BIT
AS
INSERT INTO GUESTS(National_ID, Name, Email, PhoneNumber, Address, Birthdate, Gender)
VALUES (@NATIONAL_ID, @NAME, @EMAIL, @PH_NO, @ADDRESS, @BIRTHDATE, @GENDER)
GO
CREATE PROC ADD_PRODUCT
	@NAME			NVARCHAR(MAX),
	@QUANTITY		INT,
	@PRICE			MONEY
AS 
INSERT INTO PRODUCTS(Name, Quantity, Price)
VALUES (@NAME, @QUANTITY, @PRICE)
GO
CREATE PROC ADD_DEPARTMENT
	@NAME			NVARCHAR(50),
	@MANAGER_ID		INT
AS 
INSERT INTO DEPARTMENTS (Name, Manager_ID) 
VALUES (@NAME, @MANAGER_ID) 
GO
CREATE PROC RESERVED 
	@CONTRACT		DATE,
	@EXPIRY			DATE,
	@GUEST_ID		INT,
	@ROOM_ID		INT,
	@EMP_ID			INT
AS
INSERT INTO RESERVED_ROOMS(Contract, Expiry, Guest_ID, Room_ID, Employee_ID)
VALUES (@CONTRACT, @EXPIRY, @GUEST_ID, @ROOM_ID, @EMP_ID) 
GO
CREATE PROC ADD_ROOM 
	@NO			INT,
	@SECTION	NVARCHAR(MAX),
	@FLOOR		INT,
	@TYPE		NVARCHAR(MAX),
	@PRICE		MONEY
AS
INSERT INTO ROOMS(Room_Number, Section, Floor, Type, Price)
VALUES (@NO, @SECTION, @FLOOR, @TYPE, @PRICE)
GO
CREATE PROC ADD_ORDER
	@QUANTITY		INT,
	@GUEST_ID		INT,
	@PRODUCT_ID		INT,
	@EMP_ID			INT
AS
INSERT INTO ORDERS(Quantity, Guest_ID, Product_ID, Employee_ID)
VALUES	(@QUANTITY, @GUEST_ID, @PRODUCT_ID, @EMP_ID)
GO
CREATE PROC ADD_EMP_TO_DB
	@USERNAME		NVARCHAR(MAX),
	@PASSWORD		NVARCHAR(MAX),
	@EMP_ID			INT
AS
INSERT INTO DB_INFO(UserName, Password, Employee_ID) 
VALUES	(@USERNAME, @PASSWORD, @EMP_ID) 
GO
-------------------------------------------------------------------
INSERT INTO EMPLOYEES(Name, Email) VALUES ('ADMIN', 'ADMIN')
INSERT INTO DB_INFO(UserName, Password, EMPLOYEE_ID) VALUES ('ADMIN', 'ADMIN', (SELECT TOP 1 ID FROM EMPLOYEES))